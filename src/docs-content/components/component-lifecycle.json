{"title":"Component Lifecycle Methods","description":"Component Lifecycle Methods","contributors":["jthoms1"],"heading":[{"id":"component-lifecycle-methods","level":1,"text":"Component Lifecycle Methods"},{"id":"rendering-state","level":2,"text":"Rendering State"},{"id":"lifecycle-hierarchy","level":2,"text":"Lifecycle Hierarchy"},{"id":"async-lifecycle-methods","level":2,"text":"Async Lifecycle Methods"},{"id":"example","level":2,"text":"Example"}],"srcPath":"./src/docs/components/component-lifecycle.md","content":"<h1 id=\"component-lifecycle-methods\">Component Lifecycle Methods</h1>\n<p>Components have numerous lifecycle methods which can be used to know when the component &quot;will&quot; and &quot;did&quot; load, update, and unload. These methods can be added to a component to hook into operations at the right time.</p>\n<p>Implement one of the following methods within a component class and Stencil will automatically call them in the right order:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/core'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  tag<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-component'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">/**\n   * The component is about to load and it has not\n   * rendered yet.\n   *\n   * This is the best place to make any data updates\n   * before the first render.\n   *\n   * componentWillLoad will only be called once.\n   */</span>\n  <span class=\"token function\">componentWillLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Component is about to be rendered'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * The component has loaded and has already rendered.\n   *\n   * Updating data in this method will cause the\n   * component to re-render.\n   *\n   * componentDidLoad will only be called once.\n   */</span>\n  <span class=\"token function\">componentDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Component has been rendered'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * The component is about to update and re-render.\n   *\n   * Called multiple times throughout the life of\n   * the component as it updates.\n   *\n   * componentWillUpdate is not called on the first render.\n   */</span>\n  <span class=\"token function\">componentWillUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Component will update and re-render'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * The component has just re-rendered.\n   *\n   * Called multiple times throughout the life of\n   * the component as it updates.\n   *\n   * componentDidUpdate is not called on the\n   * first render.\n   */</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Component did update'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * The component did unload and the element\n   * will be destroyed.\n   */</span>\n  <span class=\"token function\">componentDidUnload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Component removed from the DOM'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <h2 id=\"rendering-state\">Rendering State</h2>\n<p>It&#39;s always recommended to make any rendered state updates within <code>componentWillLoad()</code> or <code>componentWillUpdate()</code>, since these are the methods which get called <em>before</em> the <code>render()</code> method. Alternatively, updating rendered state with the <code>componentDidLoad()</code> or <code>componentDidUpdate()</code> methods will cause another re-render, which isn&#39;t ideal for performance.</p>\n<p>If state <em>must</em> be updated in <code>componentDidUpdate()</code>, it has the potential of getting components stuck in an infinite loop. If updating state within <code>componentDidUpdate()</code> is unavoidable, then the method should also come with a way to detect if the props or state is &quot;dirty&quot; or not (is the data actually different or is it the same as before). By doing a dirty check, <code>componentDidUpdate()</code> is able to avoid rendering the same data, and which in turn calls <code>componentDidUpdate()</code> again.</p>\n<h2 id=\"lifecycle-hierarchy\">Lifecycle Hierarchy</h2>\n<p>A useful feature of lifecycle methods is that they take their child component&#39;s lifecycle into consideration too. For example, if the parent component, <code>cmp-a</code>, has a child component, <code>cmp-b</code>, then <code>cmp-a</code> isn&#39;t considered &quot;loaded&quot; until <code>cmp-b</code> has finished loading. Another way to put it is that the deepest components finish loading first, then the <code>componentDidLoad()</code> calls bubble up.</p>\n<p>It&#39;s also important to note that even though Stencil can lazy-load components, and has asynchronous rendering, the lifecycle methods are still called in the correct order. So while the top-level component could have already been loaded, all of its lifecycle methods are still called in the correct order, which means it&#39;ll wait for a child components to finish loading. The same goes for the exact opposite, where the child components may already be ready while the parent isn&#39;t.</p>\n<p>In the example below we have a simple hierarchy of components. The numbered list shows the order of which the lifecycle methods will fire.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-markup\"><code class=\"language-markup\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cmp-a</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cmp-b</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cmp-c</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cmp-c</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cmp-b</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cmp-a</span><span class=\"token punctuation\">></span></span></code></pre>\n  </highlight-code-line>\n  <ol>\n<li><code>cmp-a</code> - <code>componentWillLoad()</code></li>\n<li><code>cmp-b</code> - <code>componentWillLoad()</code></li>\n<li><code>cmp-c</code> - <code>componentWillLoad()</code></li>\n<li><code>cmp-c</code> - <code>componentDidLoad()</code></li>\n<li><code>cmp-b</code> - <code>componentDidLoad()</code></li>\n<li><code>cmp-a</code> - <code>componentDidLoad()</code></li>\n</ol>\n<p>Even if some components may or may not be already loaded, the entire component hierarchy waits on its child components to finish loading and rendering.</p>\n<h2 id=\"async-lifecycle-methods\">Async Lifecycle Methods</h2>\n<p>Lifecycle methods can also return promises which allows the method to asynchronously retrieve data or perform any async tasks. A great example of this is fetching data to be rendered in a component. For example, this very site you&#39;re reading first fetches content data before rendering. But because <code>fetch()</code> is async, it&#39;s important that <code>componentWillLoad()</code> returns a <code>Promise</code> to ensure its parent component isn&#39;t considered &quot;loaded&quot; until all of its content has rendered.</p>\n<p>Below is a quick example showing how <code>componentWillLoad()</code> is able to have its parent component wait on it to finish loading its data.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">componentWillLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/some-data.json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <h2 id=\"example\">Example</h2>\n<p>This simple example shows a clock and updates the current time every second. Since <code>componentDidLoad</code> is only called once, we will only ever have one instance of the timer running. Once the component unloads, the timer is stopped.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> State <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/core'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  tag<span class=\"token punctuation\">:</span> <span class=\"token string\">'custom-clock'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomClock</span> <span class=\"token punctuation\">{</span>\n\n  timer<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  @<span class=\"token function\">State</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidUnload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span> time <span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <blockquote>\n<p>Here is the example running.  If you want to see it in action then just inspect it with dev tools.\n<custom-clock/></p>\n</blockquote>\n<stencil-route-link url=\"/docs/my-first-component\" router=\"#router\" custom=\"true\">\n  <button class=\"pull-left btn btn--secondary\">\n    Back\n  </button>\n</stencil-route-link>\n\n<stencil-route-link url=\"/docs/decorators\" custom=\"true\">\n  <button class=\"pull-right btn btn--primary\">\n    Next\n  </button>\n</stencil-route-link>\n"}