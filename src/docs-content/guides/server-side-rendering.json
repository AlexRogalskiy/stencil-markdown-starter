{"srcPath":"./src/docs-md/guides/server-side-rendering.md","content":"<h1 id=\"server-side-rendering\">Server Side Rendering</h1>\n<p>One of the benefits of Stencil is that it also enables efficient Server Side Rendering (SSR) easily. However, before deciding to render each page on-demand on a server, it may be best to look into using <a href=\"/docs/prerendering\">prerendering</a> instead. In most cases prerendering is preferred since it doesn&#39;t add to the server&#39;s workload, but rather just responds with &quot;pre-rendered&quot; static content.</p>\n<p>Server-side rendering is useful for dynamic data, such as live product data or user information. With <a href=\"/docs/prerendering\">prerendering</a>, apps are serving a pre-built version of the page, which may not work for pages that need the latest data. However, every webapp and webpage&#39;s use-case is different, which is why both prerendering and SSR are available using the same codebase.</p>\n<p>Stencil supports <a href=\"https://nodejs.org/\">Node.js</a> servers out of the box, and the SSR rendering engine is baked right into the <code>@stencil/core</code> package. To see a full example, please take a look at the <a href=\"https://github.com/ionic-team/stencil-ssr-starter\">Stencil SSR Starter</a>.</p>\n<h2 id=\"stencil-ssr-express-middleware-server\">Stencil SSR Express Middleware Server</h2>\n<p>The easiest way to run server-side rendering on a Node.js server is to use the <a href=\"https://expressjs.com/en/guide/using-middleware.html\">Express middleware</a> already included within <code>@stencil/core/server</code>. By using the middleware, it&#39;s easy to hook into an <a href=\"https://expressjs.com/\">Express.js</a> app without getting into the low-level details of setting up a server and responding with data.</p>\n\n<highlight-code-line >\n  <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stencil <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@stencil/core/server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create the express app</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// load the stencil config and</span>\n<span class=\"token comment\">// express serve-side rendering middleware</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> wwwDir<span class=\"token punctuation\">,</span> logger <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> stencil<span class=\"token punctuation\">.</span><span class=\"token function\">initApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">,</span>\n  configPath<span class=\"token punctuation\">:</span> __dirname\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// serve static files</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">(</span>wwwDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// set which port express it will be listening on</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3030</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// start listening and handling requests</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`server-side rendering listening on port: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> port <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</highlight-code-line>\n<h2 id=\"node-js-http-ssr-server\">Node.js HTTP SSR Server</h2>\n<p>The Express middleware option shown above is the easiest way to get up and running, but the same API which the middleware uses can also be used directly. Below is an example of running an overly simplified <a href=\"https://nodejs.org/api/http.html\">Node HTTP server</a> using the low-level server-side rendering API.</p>\n\n<highlight-code-line >\n  <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stencil <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../../server/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// load the config</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> stencil<span class=\"token punctuation\">.</span><span class=\"token function\">loadConfig</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ensure ssr flag is set on the config</span>\nconfig<span class=\"token punctuation\">.</span>flags <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> ssr<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create the renderer</span>\n<span class=\"token keyword\">const</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">stencil<span class=\"token punctuation\">.</span>Renderer</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// load the source index.html</span>\n<span class=\"token keyword\">const</span> srcIndexHtml <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>srcIndexHtml<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create a request handler</span>\n<span class=\"token comment\">// this is an overly simplified example</span>\n<span class=\"token comment\">// in a real-world server there would be route handlers</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">requestHandler</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// hydrate!!</span>\n  renderer<span class=\"token punctuation\">.</span><span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    html<span class=\"token punctuation\">:</span> srcIndexHtml<span class=\"token punctuation\">,</span>\n    req<span class=\"token punctuation\">:</span> req\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>results <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// console log any diagnostics</span>\n    results<span class=\"token punctuation\">.</span>diagnostics<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>messageText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// respond with the hydrated html</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// create the server</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span>requestHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// set which port the server will be listening on</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3030</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// start listening and handling requests</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`server-side rendering listening on port: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> port <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</highlight-code-line>\n<stencil-route-link url=\"/docs/prerendering\" router=\"#router\" custom=\"true\">\n  <button class=\"pull-left btn btn--secondary\">\n    Back\n  </button>\n</stencil-route-link>\n\n<stencil-route-link url=\"/docs/service-workers\" custom=\"true\">\n  <button class=\"pull-right btn btn--primary\">\n    Next\n  </button>\n</stencil-route-link>\n"}